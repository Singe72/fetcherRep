import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";

export async function GET(
    request: Request,
    { params }: { params: { vulnerability_id: number } }
) {
    const vulnerability_id = params.vulnerability_id;
    const vulnerability = await prisma.vulnerability.findUnique({
        where: {
            vulnerability_id,
        },
    });

    if (!vulnerability) {
        let error_response = {
            status: "fail",
            message: "The provided vulnerability is unknown",
        };
        return new NextResponse(JSON.stringify(error_response), {
            status: 404,
            headers: { "Content-Type": "application/json" },
        });
    }

    let json_response = {
        status: "success",
        data: {
            vulnerability,
        },
    };
    return NextResponse.json(json_response);
}

export async function POST(
    request: Request,
    { params }: { params: { vulnerability_id: number } }
) {
    try {
        const vulnerability_id = params.vulnerability_id;
        let json = await request.json();

        const vulnerability = await prisma.vulnerability.create({
            data: json,
        });

        let json_response = {
            status: "success",
            data: {
                vulnerability
            },
        };
        return new NextResponse(JSON.stringify(json_response), {
            status: 201,
            headers: { "Content-Type": "application/json" }
        });
    } catch (error: any) {
        if (error.code === "P2002") {
            let error_response = {
                status: "fail",
                message: "The provided vulnerability already exists",
            };
            return new NextResponse(JSON.stringify(error_response), {
                status: 409,
                headers: { "Content-Type": "application/json" },
            });
        }

        let error_response = {
            status: "error",
            message: error.message,
        };
        return new NextResponse(JSON.stringify(error_response), {
            status: 500,
            headers: { "Content-Type": "application/json" },
        });
    }
}